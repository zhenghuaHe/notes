
当服务器被没有经验攻击者或者自动攻击程序入侵了的话，他们往往会消耗100%的资源。他们可能消耗CPU资源来进行数字货币的采矿或者发送垃圾邮件，也可能消耗带宽来发动 DoS攻击。

这里说的都是一些基础的排查方法，如果遇到比较强的入侵，大部分人都查不出来。

- 如何发现？
检查 1 - 当前都有谁在登录?
你首先要查看当前都有谁登录在服务器上，发现攻击者登录到服务器上进行操作并不复杂。
$ w
08:32:55 up 98 days,  5:43,  2 users,  load average: 0.05, 0.03, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
root     pts/0    113.174.161.1    08:26    0.00s  0.03s  0.02s ssh root@coopeaa12
root     pts/1    78.31.109.1      08:26    0.00s  0.01s  0.00s w

注释：可以看到登录的ip地址不是自己的，可能存在问题
whois命令可以接一个IP地址然后告诉你该IP所注册的组织的所有信息，当然就包括所在国家的信息


检查 2 - 谁曾经登录过?
$ last
root     pts/0        172.16.1.200     Thu Apr 18 10:15   still logged in
spark    pts/1        172.16.2.163     Wed Apr 17 16:27 - crash  (16:37)
spark    pts/0        172.16.2.163     Wed Apr 17 16:25 - crash  (16:39)
spark    pts/2        172.16.2.190     Wed Apr 17 10:05 - 15:33  (05:27)

注释：last命令可以看到哪些人登陆过
登录后的历史记录会记录到二进制的/var/log/wtmp文件中，因此很容易被删除。通常攻击者会直接把这个文件删掉，以掩盖他们的攻击行为。



检查 3 - 回顾命令历史
$ history
    1  vim /etc/sysconfig/network-scripts/ifcfg-eth0
    2  vi /etc/sysconfig/network-scripts/ifcfg-eth0
    3  systemctl restart network
    4  ss -ntl
    5  ip a
    6  ping 172.16.1.108

注释：history可以看到执行过哪些命令。一定留意有没有用wget或curl命令来下载类似垃圾邮件机器人或者挖矿程序之类的非常规软件。
命令历史存储在~/.bash_history文件中，因此有些攻击者会删除该文件以掩盖他们的所作所为。跟登录历史一样，若你运行history命令却没有输出任何东西那就表示历史文件被删掉了。



检查 4 - 哪些进程在消耗 CPU？
$ top

top - 11:02:31 up  1:18,  1 user,  load average: 0.00, 0.01, 0.05
Tasks: 120 total,   1 running, 119 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.0 id,  0.8 wa,  0.0 hi,  0.0 si,  0.1 st
KiB Mem :  8010524 total,  7427540 free,   281992 used,   300992 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  7466296 avail Mem

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
    1 root      20   0  125340   3772   2468 S   0.0  0.0   0:02.56 systemd
    2 root      20   0       0      0      0 S   0.0  0.0   0:00.01 kthreadd

注释：可以直接看到对cpu消耗比较高的进程，看看自己是否熟悉。
执行lsof　-p PID可以看到这个进程在干什么，打开了哪些文件。



检查 5 - 检查所有的系统进程
$ ps -auxf
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         2  0.0  0.0      0     0 ?        S    09:43   0:00 [kthreadd]
polkitd    655  0.0  0.1 527568 12864 ?        Ssl  09:44   0:00 /usr/lib/polkit-1/polkitd --no-debug
root       657  0.0  0.0  19224  1208 ?        Ss   09:44   0:00 /usr/sbin/irqbalance --foreground
root       670  0.0  0.0 126280  1600 ?        Ss   09:44   0:00 /usr/sbin/crond -n

注释：消耗CPU不严重的未授权进程可能不会在top中显露出来，不过它依然可以通过ps列出来，你需要检查一下每个不认识的进程。

检查 6 - 检查进程的网络使用情况
$ iftop

注释：可以查看你的网卡流量进出情况，查看是否存在异常的大流量端口。（这个不好截图就没放）
iftop的功能类似top，它会排列显示收发网络数据的进程以及它们的源地址和目的地址。类似DoS攻击或垃圾机器人这样的进程很容易显示在列表的最顶端。

检查 7 - 哪些进程在监听网络连接?
$ netstat -lnp
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:57820           0.0.0.0:*               LISTEN      1185/rpc.statd
tcp        0      0 0.0.0.0:8670            0.0.0.0:*               LISTEN      1361/python2

注释：通常攻击者会安装一个后门程序专门监听网络端口接受指令。该进程等待期间是不会消耗CPU和带宽的，因此也就不容易通过top之类的命令发现。
留意一下监听的端口，看看是否有自己不熟悉的，看一下他们在做什么。


- 发现入侵的基本做法
发现入侵，你需要在攻击者警觉到你已经发现他之前夺回机器的控制权。

如果你技术不太好那么就直接关机吧。你可以在服务器上运行 shutdown -h now 或者 systemctl poweroff 这两条命令之一。也可以登录主机提供商的控制面板中关闭服务器。关机后，你就可以开始配置防火墙或者咨询一下供应商的意见。

如果你对自己颇有自信，而你的主机提供商也有提供上游防火墙，那么你只需要以此创建并启用下面两条规则就行了：

只允许从你的IP地址登录SSH。
封禁除此之外的任何东西，不仅仅是SSH，还包括任何端口上的任何协议。
这样会立即关闭攻击者的SSH会话，而只留下你可以访问服务器。

如果你无法访问上游防火墙，那么你就需要在服务器本身创建并启用这些防火墙策略，然后在防火墙规则起效后使用 kill 命令关闭攻击者的 SSH 会话。（注：本地防火墙规则不会阻止已经建立的SSH会话，所以保险起见，你需要手工杀死该会话。）

最后还有一种方法，如果支持的话，就是通过诸如串行控制台之类的带外连接登录服务器，然后通过 systemctl stop network.service 停止网络功能。这会关闭所有服务器上的网络连接，这样你就可以慢慢的配置那些防火墙规则了。

重夺服务器的控制权后，也不要以为就万事大吉了。

不要试着修复这台服务器，然后接着用。你永远不知道攻击者做过什么，因此你也永远无法保证这台服务器还是安全的。

最好的方法就是拷贝出所有的数据，然后重装系统。（注：你的程序这时已经不可信了，但是数据一般来说没问题。）
