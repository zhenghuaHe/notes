
# 免费证书颁发
* 因公司发展需要，需要给公司的网站访问做上https,详细步骤如下：

## 参考：
    > http://www.cnblogs.com/one-villager/p/certbot_build_https.html
    > 安装教程：https://certbot.eff.org/#centos6-nginx
```
$ yum install epel-release -y
$ wget https://dl.eff.org/certbot-auto　　　＃获取
$ chmod a+x ./certbot-auto　　　　　　　　　　　#赋予权限


#生成证书
$ ./certbot-auto certonly --nginx --email xxxx@gmail.com --webroot -w /data/vhosts/xttan.com/wordpress -d www.xttan.com　　　　#换成自己的域名即可
How would you like to authenticate with the ACME CA?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: Apache Web Server plugin (apache)
2: Nginx Web Server plugin (nginx)
3: Spin up a temporary webserver (standalone)
4: Place files in webroot directory (webroot)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-4] then [enter] (press 'c' to cancel): 　　　　　　#输入２，根据自己需要选择,接下来的通过即可

Cleaning up challenges

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/hzh.ettda.net/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/hzh.ettda.net/privkey.pem
   Your cert will expire on 2019-03-12. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot-auto
   again. To non-interactively renew *all* of your certificates, run
   "certbot-auto renew"
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le


#见到这个信息就是成功了。
$ find /etc/ -name *.pem
/etc/letsencrypt/live/hzh.ettda.net/privkey.pem
/etc/letsencrypt/live/hzh.ettda.net/chain.pem
/etc/letsencrypt/live/hzh.ettda.net/cert.pem
/etc/letsencrypt/live/hzh.ettda.net/fullchain.pem


#生成 dhparam.pem
$ openssl dhparam -out dhparam.pem 4096
##### 配置到nginx
ssl_dhparam /etc/ssl/certs/dhparam.pem;

#自动更新
$ /root/certbot-auto renew　&& systemctl -s reload
```

## 参考配置
```
$ vim /etc/nginx/conf.d/default.conf
server {
    listen    80;
    server_name hzh.ettda.net;
    root /usr/share/nginx/html;
    location / {
#        return 301 https://$server_name$request_uri;
        proxy_pass   http://127.0.0.1:8080/index.html;
    }

    location ~ \.php$ {
      return 403;
    }

}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name hzh.ettda.net;
    root /usr/share/nginx/html;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /etc/letsencrypt/live/hzh.ettda.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/hzh.ettda.net/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_trusted_certificate  /etc/letsencrypt/live/hzh.ettda.net/chain.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;
    location / {
#        return 301 https://$server_name$request_uri;
        proxy_pass   http://127.0.0.1:8080/index.html;
    }
    location ~ \.php$ {
      return 403;
    }
}
```
随意访问自己的域名就会发现变成了https的啦～


## 参考配置2：
```
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
  listen 9443 ssl http2;
  root /usr/share/nginx/html/;

  # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
  ssl_certificate /etc/letsencrypt/live/scm.mwteck.com-0002/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/scm.mwteck.com-0002/privkey.pem;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

#    ssl_dhparam /etc/letsencrypt/live/scm.mwteck.com/dhparam.pem;
  ssl_dhparam /etc/letsencrypt/live/scm.mwteck.com-0002/dhparam.pem;
  # intermediate configuration. tweak to your needs.
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
  ssl_prefer_server_ciphers on;

  # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
  add_header Strict-Transport-Security max-age=15768000;

  # OCSP Stapling ---
  # fetch OCSP records from URL in ssl_certificate and cache them
  ssl_stapling on;
  ssl_stapling_verify on;

  access_log  /var/log/nginx/scm_access.log gitlab_access;
  error_log   /var/log/nginx/scm_error.log;

  location / {
    ## If you use HTTPS make sure you disable gzip compression
    ## to be safe against BREACH attack.
    gzip off;

    ## https://github.com/gitlabhq/gitlabhq/issues/694
    ## Some requests take more than 30 seconds.
    proxy_read_timeout      3600;
    proxy_connect_timeout   300;
    proxy_redirect          off;
    proxy_http_version 1.1;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Ssl on;

    proxy_pass http://192.168.122.2:8080;

  }

  error_page 404 /404.html;
  error_page 422 /422.html;
  error_page 500 /500.html;
  error_page 502 /502.html;

  location ~ ^/(404|422|500|502)(-custom)?\.html$ {
    root /opt/gitlab/embedded/service/gitlab-rails/public;
    internal;
  }
}
```
